[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Practical",
    "section": "",
    "text": "Link for my repository:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>index</span>"
    ]
  },
  {
    "objectID": "Prac1.html",
    "href": "Prac1.html",
    "title": "2  Prac1",
    "section": "",
    "text": "2.1 Question 3\nCode\ndata(\"cars\")\nData_cars = data.frame(cars)\n\n#The response variable\nResponse  = as.vector(Data_cars$dist)\n\n#The design matrix\nDesign    = cbind(1,Data_cars$speed)\n\n#Calculate beta\n\nbeta = solve(t(Design)%*%Design)%*%t(Design)%*%Response\n\nbeta\n\n\n           [,1]\n[1,] -17.579095\n[2,]   3.932409\n##Question 4\nCode\n#Use lm function to estimate beta\nmodel = lm(dist~speed,Data_cars)\nsummary(model)\n\n\n\nCall:\nlm(formula = dist ~ speed, data = Data_cars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-29.069  -9.525  -2.272   9.215  43.201 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -17.5791     6.7584  -2.601   0.0123 *  \nspeed         3.9324     0.4155   9.464 1.49e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.38 on 48 degrees of freedom\nMultiple R-squared:  0.6511,    Adjusted R-squared:  0.6438 \nF-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Prac1</span>"
    ]
  },
  {
    "objectID": "Prac1.html#question-5",
    "href": "Prac1.html#question-5",
    "title": "2  Prac1",
    "section": "2.2 Question 5",
    "text": "2.2 Question 5\n\n\nCode\n#Calculate beta\n#Calc std error\n#Calc p value\n  \nf&lt;- function(X,Y){\n Response_ &lt;- Y\n Design_ &lt;- X\n \n #Calculate betaa\n beta_ &lt;- solve(t(Design_)%*%Design_)%*%t(Design_)%*%Response\n \n  n &lt;- length(Response)\n  k &lt;- ncol(beta_)\n\n #Calculate Standard error\n Residuals &lt;- Response - Design%*%beta_\n RSS &lt;- sum(Residuals^2)\n Res_variance &lt;- RSS/(n-k)\n\n std_err &lt;- t(sqrt(Res_variance%*%diag(solve(t(Design_)%*%Design_))))\n \n #Calculate t statistic\n t_stat &lt;- beta_/std_err\n \n #Degrees of freedom\n df_ &lt;- n - k\n \n # The p value\n p_val &lt;- 2*pt(t_stat,df = df_,lower.tail = FALSE)\n \n #Return list\n return(list(\"Coefficients\"= beta_,\"Std error\" = std_err,\"t_stat\" = t_stat,\"pvalue\" = p_val))\n  \n}\nb &lt;- f(Design,Response)\nb\n\n\n$Coefficients\n           [,1]\n[1,] -17.579095\n[2,]   3.932409\n\n$`Std error`\n         [,1]\n[1,] 6.689121\n[2,] 0.411251\n\n$t_stat\n          [,1]\n[1,] -2.628013\n[2,]  9.562065\n\n$pvalue\n             [,1]\n[1,] 1.988564e+00\n[2,] 8.712799e-13",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Prac1</span>"
    ]
  },
  {
    "objectID": "Prac2.html",
    "href": "Prac2.html",
    "title": "3  Prac2",
    "section": "",
    "text": "3.1 Question 1\nCode\nrm(list=ls())\n#1. Generate Simulated data\n#Set seed\nset.seed(1)\n\n#Generate Simulated Data\nx &lt;- seq(1, by = 1, length.out = 100)\ne &lt;- rnorm(n=100,mean=0,sd=0.2)\ny &lt;- sin(x/10) + e\n\n\n#2. Implement the LOWESS Algorithm\n\ncustomLowess&lt;- function(x,y,f){\n # The function returns smoothed values\n # x is the vector of x coordinates of data points\n # y is the vector of second coordinates of the data points \n # f is the span of the smoothing\n # n the number of observations\n  \n #k is the number of closest neighbours for point i:\n  n &lt;- length(x)\n  k &lt;- ceiling(f*n)\n  \n  #Initialize predicted values\n  y_hat &lt;- numeric(n)\n  for(i in 1:n){\n    \n    dist_vec      &lt;- abs(x-x[i])\n    neighbour_ind &lt;- order(dist_vec)[1:k]\n    #Remove i from neighbouring points indexes\n    #neighbour_ind &lt;- neighbour_ind[neighbour_ind!=i]\n    \n    #Find neighbouring points\n    x_neighbour &lt;- x[neighbour_ind]\n    y_neighbour &lt;- y[neighbour_ind]\n    \n    #The Design matrix\n    Design      &lt;- cbind(1,x_neighbour)\n    \n    #Calculate weights\n    distances&lt;- abs(x_neighbour-x[i])\n    d_max    &lt;- max(distances) \n    \n    #Calculate weights\n    weights  &lt;- (1 - (distances / d_max)^3)^3\n    \n    W &lt;- diag(weights)\n    \n    #Calculate beta hat\n    beta_hat &lt;- solve(t(Design)%*%W%*%Design)%*%t(Design)%*%W%*%y_neighbour\n    \n    #Calculate y_hat: the smoothed values\n    y_hat[i] &lt;- beta_hat%*%c(1,x[i])\n    y_hat[i] &lt;- beta_hat[1] + beta_hat[2]%*%x[i]\n  \n  }\n  #Return smoothed values\n  return(list(\"y_hat\" = y_hat))\n}\nh &lt;- customLowess(x,y,0.3)\nh\n\n\n$y_hat\n  [1]  0.35554695  0.40109635  0.44535832  0.48834209  0.53011233  0.57072253\n  [7]  0.61023106  0.64872907  0.68630683  0.72302961  0.75893617  0.79404220\n [13]  0.82821589  0.86079102  0.88901932  0.88633437  0.87398837  0.85326062\n [19]  0.82520545  0.79030516  0.74895681  0.70128236  0.64703969  0.58594202\n [25]  0.51812323  0.44438125  0.36543043  0.28221764  0.19623844  0.10946682\n [31]  0.02327915 -0.06137856 -0.14395207 -0.22401291 -0.30112308 -0.37499740\n [37] -0.44523592 -0.51137218 -0.57278166 -0.62860373 -0.67862958 -0.72203778\n [43] -0.75745442 -0.78396630 -0.80167188 -0.81113894 -0.81292413 -0.80676638\n [49] -0.79259973 -0.77028179 -0.73966214 -0.70111254 -0.65527046 -0.60318183\n [55] -0.54554520 -0.48261018 -0.41415389 -0.34057522 -0.26298851 -0.18233074\n [61] -0.09955106 -0.01579443  0.06767539  0.14963410  0.22915509  0.30539516\n [67]  0.37774442  0.44592289  0.50995564  0.56996222  0.62500086  0.67421841\n [73]  0.71759700  0.75540502  0.78716755  0.81214686  0.82928508  0.83791450\n [79]  0.83804180  0.83028217  0.81558933  0.79506568  0.76946249  0.73811171\n [85]  0.69989958  0.65360184  0.58179901  0.50628469  0.42962799  0.35231469\n [91]  0.27438493  0.19580894  0.11655330  0.03654637 -0.04431399 -0.12614486\n [97] -0.20908598 -0.29325925 -0.37871591 -0.46544417\n##Question 2\nCode\n#Double check\nw&lt;-lowess(x,y,0.3)\nw\n\n\n$x\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n\n$y\n  [1]  0.37215867  0.41586573  0.45833166  0.49956155  0.53961283  0.57852916\n  [7]  0.61635809  0.65317941  0.68906752  0.72406488  0.75817712  0.79137891\n [13]  0.82352285  0.85403419  0.88070143  0.87741755  0.86517349  0.84525675\n [19]  0.81837783  0.78467451  0.74443603  0.69786806  0.64473891  0.58470922\n [25]  0.51789836  0.44513089  0.36697691  0.28437085  0.19889668  0.11247590\n [31]  0.02647324 -0.05810479 -0.14066580 -0.22073779 -0.29780891 -0.37152993\n [37] -0.44140293 -0.50695385 -0.56771517 -0.62294888 -0.67251426 -0.71551555\n [43] -0.75053322 -0.77662049 -0.79388796 -0.80276601 -0.80375396 -0.79695910\n [49] -0.78251727 -0.76032614 -0.73015462 -0.69230728 -0.64731719 -0.59615405\n [55] -0.53950026 -0.47766175 -0.41063849 -0.33883259 -0.26332907 -0.18502757\n [61] -0.10478895 -0.02368078  0.05713457  0.13654652  0.21379025  0.28816112\n [67]  0.35912390  0.42641266  0.49006881  0.55017849  0.60573640  0.65587861\n [73]  0.70053990  0.73988760  0.77336747  0.80015287  0.81891063  0.82874939\n [79]  0.82963219  0.82227455  0.80778174  0.78739014  0.76181734  0.73053590\n [85]  0.69264161  0.64699440  0.57666207  0.50253928  0.42722577  0.35126215\n [91]  0.27470650  0.19752953  0.11969451  0.04112742 -0.03827574 -0.11863391\n [97] -0.20008632 -0.28275500 -0.36669442 -0.45189542\n\n\nCode\n#Plot Origional data vs smoothed data\nplot(x, y,pch = 16)\npoints(x, h$y_hat, col = \"red\",type=\"l\",lwd=2)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Prac2</span>"
    ]
  },
  {
    "objectID": "Prac4.html",
    "href": "Prac4.html",
    "title": "4  Prac4",
    "section": "",
    "text": "Code\nlibrary(nycflights13)\nlibrary(tibble)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(tidyr)\nflights &lt;- as_tibble(flights)\n\n\n##Question 1\n\n\nCode\n#Rewrite this function using dplyr\n\nlibrary(nycflights13)\ndata(flights)\n\n\nflight1 &lt;- flights[flights$month == 1, ]\ncarrier_vec &lt;- unique(flight1$carrier)\ncarrier_dist_vec_mean &lt;- numeric(length(carrier_vec))\ncarrier_dist_vec_sd &lt;- numeric(length(carrier_vec))\nfor (i in seq_along(carrier_vec)) {\n  carrier_dist_vec_mean[i] &lt;- mean(\n    flight1$distance[flight1$carrier == carrier_vec[i]]\n   )\n  carrier_dist_vec_sd[i] &lt;- sd(\n    flight1$distance[flight1$carrier == carrier_vec[i]]\n  )\n}\ndist_tbl &lt;- tibble(\n  carrier = carrier_vec,\n  mean_distance = carrier_dist_vec_mean,\n  sd_distance = carrier_dist_vec_sd\n)\ndist_tbl[order(dist_tbl$mean_distance), ]\n\n\n# A tibble: 16 × 3\n   carrier mean_distance sd_distance\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n 1 YV               229          0  \n 2 9E               476.       334. \n 3 EV               522.       294. \n 4 US               536.       553. \n 5 MQ               566.       223. \n 6 FL               691.       142. \n 7 OO               733         NA  \n 8 WN               942.       496. \n 9 B6              1062.       681. \n10 DL              1220.       644. \n11 AA              1350.       626. \n12 UA              1462.       778. \n13 F9              1620          0  \n14 AS              2402          0  \n15 VX              2495.        98.2\n16 HA              4983          0  \n\n\n##Question 3\n\n\nCode\n#Distances for each carrier\n\n#Carrier YV\nattach(flight1)\ncarrier_YV &lt;- flight1[carrier == \"YV\",]\nUtilsDataRSV::view_cols(carrier_YV)\n\n\n[1] \"year\"\n[1] 1771\n[1] \"_____________________\"\n[1] \"month\"\n[1] 1\n[1] \"_____________________\"\n[1] \"day\"\n[1] 17 30 29  7  4\n[1] \"_____________________\"\n[1] \"dep_time\"\n[1] 1559 1603 1435 1428   NA\n[1] \"_____________________\"\n[1] \"sched_dep_time\"\n[1] 1435 1602 1605\n[1] \"_____________________\"\n[1] \"dep_delay\"\n[1]  89  47 238  -4  NA\n[1] \"_____________________\"\n[1] \"arr_time\"\n[1] 1543 1837 1532 1655   NA\n[1] \"_____________________\"\n[1] \"sched_arr_time\"\n[1] 1722 1729 1559\n[1] \"_____________________\"\n[1] \"arr_delay\"\n[1]  56 -17 -27  14  NA\n[1] \"_____________________\"\n[1] \"carrier\"\n[1] \"YV\"\n[1] \"_____________________\"\n[1] \"flight\"\n[1] 3750 3771\n[1] \"_____________________\"\n[1] \"tailnum\"\n [1] \"N505MJ\" \"N504MJ\" \"N521LR\" \"N516LR\" \"N515MJ\" \"N510MJ\" \"N518LR\" \"N509MJ\"\n [9] \"N506MJ\" \"N511MJ\" \"N503MJ\" \"N507MJ\" \"N508MJ\" \"N519LR\" \"N522LR\" \"N502MJ\"\n[17] \"N513MJ\"\n[1] \"_____________________\"\n[1] \"origin\"\n[1] \"LGA\"\n[1] \"_____________________\"\n[1] \"dest\"\n[1] \"IAD\"\n[1] \"_____________________\"\n[1] \"air_time\"\n[1] 57 52 47 48 NA\n[1] \"_____________________\"\n[1] \"distance\"\n[1] 79\n[1] \"_____________________\"\n[1] \"hour\"\n[1] 14 16\n[1] \"_____________________\"\n[1] \"minute\"\n[1]  2  5 35\n[1] \"_____________________\"\n[1] \"time_hour\"\n [1] \"2013-01-09 14:00:00 EST\" \"2013-01-30 16:00:00 EST\"\n [3] \"2013-01-08 14:00:00 EST\" \"2013-01-28 16:00:00 EST\"\n [5] \"2013-01-07 14:00:00 EST\" \"2013-01-16 14:00:00 EST\"\n [7] \"2013-01-15 14:00:00 EST\" \"2013-01-21 16:00:00 EST\"\n [9] \"2013-01-28 14:00:00 EST\" \"2013-01-06 16:00:00 EST\"\n[11] \"2013-01-29 16:00:00 EST\" \"2013-01-14 14:00:00 EST\"\n[13] \"2013-01-17 14:00:00 EST\" \"2013-01-14 16:00:00 EST\"\n[15] \"2013-01-24 14:00:00 EST\" \"2013-01-04 14:00:00 EST\"\n[17] \"2013-01-08 16:00:00 EST\" \"2013-01-11 16:00:00 EST\"\n[19] \"2013-01-03 16:00:00 EST\" \"2013-01-30 14:00:00 EST\"\n[1] \"26 unique entries not displayed\"\n[1] \"_____________________\"\n\n\nWarning: Not all unique entries displayed for these non-numeric cols: time_hour\n\n\nCode\ncarrier_OO &lt;- flight1[carrier == \"OO\",]\nUtilsDataRSV::view_cols(carrier_OO)\n\n\n[1] \"year\"\n[1] 1641\n[1] \"_____________________\"\n[1] \"month\"\n[1] 1\n[1] \"_____________________\"\n[1] \"day\"\n[1] 3\n[1] \"_____________________\"\n[1] \"dep_time\"\n[1] 1115\n[1] \"_____________________\"\n[1] \"sched_dep_time\"\n[1] 933\n[1] \"_____________________\"\n[1] \"dep_delay\"\n[1] 37\n[1] \"_____________________\"\n[1] \"arr_time\"\n[1] 553\n[1] \"_____________________\"\n[1] \"sched_arr_time\"\n[1] 468\n[1] \"_____________________\"\n[1] \"arr_delay\"\n[1] 91\n[1] \"_____________________\"\n[1] \"carrier\"\n[1] \"OO\"\n[1] \"_____________________\"\n[1] \"flight\"\n[1] 3227\n[1] \"_____________________\"\n[1] \"tailnum\"\n[1] \"N978SW\"\n[1] \"_____________________\"\n[1] \"origin\"\n[1] \"LGA\"\n[1] \"_____________________\"\n[1] \"dest\"\n[1] \"ORD\"\n[1] \"_____________________\"\n[1] \"air_time\"\n[1] 3\n[1] \"_____________________\"\n[1] \"distance\"\n[1] 614\n[1] \"_____________________\"\n[1] \"hour\"\n[1] 8\n[1] \"_____________________\"\n[1] \"minute\"\n[1] 9\n[1] \"_____________________\"\n[1] \"time_hour\"\n[1] \"2013-01-30 11:00:00 EST\"\n[1] \"_____________________\"\n\n\nThe standard deviation for carrier OO is NA because there is only one observation. From the definition of standard deviation, you need more that one observation to conduct the calculation.For the carriers that have zero standard deviation, we observe that the carriers with zero standard deviation have the same value for distances.\n##Question 4\n\n\nCode\n#Calculate averages\nmonth_averages &lt;- flights%&gt;%\n  group_by(month,carrier)%&gt;%\n  summarize(average_delay = mean(dep_delay,na.rm = TRUE))%&gt;%\n  pivot_wider(names_from = carrier,values_from = average_delay, values_fill = 0)\n\n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\n\n##Question 5\n\n\nCode\n#delayed and early arrival flights\ndelay_arrive &lt;- flights%&gt;%filter(dep_delay&gt;0,arr_delay&lt;=0)%&gt;%count()\n\n#Calculate proportion\nproportion &lt;- delay_arrive/length(flights)\nproportion\n\n\n         n\n1 1865.368\n\n\n##Question 6\n\n\nCode\n#Roots with more that  one airlines\nmultiple_airlines_routes &lt;- flights%&gt;%group_by(origin,dest)%&gt;%\n  distinct(carrier)%&gt;%summarize(count=n())%&gt;%\n  filter(count&gt;1)\n\n\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\n\nCode\nmultiple_airlines_routes\n\n\n# A tibble: 128 × 3\n# Groups:   origin [3]\n   origin dest  count\n   &lt;chr&gt;  &lt;chr&gt; &lt;int&gt;\n 1 EWR    ATL       4\n 2 EWR    AUS       2\n 3 EWR    BDL       2\n 4 EWR    BNA       2\n 5 EWR    BOS       3\n 6 EWR    BWI       2\n 7 EWR    CHS       2\n 8 EWR    CLE       2\n 9 EWR    CLT       3\n10 EWR    CVG       2\n# ℹ 118 more rows\n\n\nCode\n#Calculate average arrival delay \naverage_arrival_delay &lt;- flights%&gt;%semi_join(multiple_airlines_routes,by = c(\"origin\",\"dest\"))%&gt;%\n  group_by(origin,dest,carrier)%&gt;%\n  summarize(avg_arr_delay= mean(arr_delay,na.rm=TRUE))\n\n\n`summarise()` has grouped output by 'origin', 'dest'. You can override using\nthe `.groups` argument.\n\n\nCode\naverage_arrival_delay\n\n\n# A tibble: 343 × 4\n# Groups:   origin, dest [128]\n   origin dest  carrier avg_arr_delay\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 EWR    ATL   9E              -6.25\n 2 EWR    ATL   DL              10.0 \n 3 EWR    ATL   EV              19.5 \n 4 EWR    ATL   UA              10.5 \n 5 EWR    AUS   UA               4.28\n 6 EWR    AUS   WN             -11.2 \n 7 EWR    BDL   EV               6.78\n 8 EWR    BDL   UA              22.6 \n 9 EWR    BNA   EV              17.7 \n10 EWR    BNA   WN              -2.13\n# ℹ 333 more rows\n\n\nCode\n#Best arrival delay for each route\n#best_worst_delay&lt;-average_arrival_delay%&gt;%group_by(origin,dest)%&gt;%\n # summarize(\n  #  best_delay = min(avg_arr_delay,na.rm = TRUE),\n   # worst_delay = max(avg_arr_delay,na.rm= TRUE)\n  #)%&gt;%left_join()\n#best_worst_delay\n\n#Find route with greatest difference\n\n#difference &lt;- best_worst_delay %&gt;% group_by(origin,dest)%&gt;%\n # summarize(delay_deifference = worst_delay-best_delay )\n\n\n##Question 7\n\n\nCode\n#Load data\nlibrary(tibble)\nindividual_data&lt;- structure(list(id = c(\"id_1\", \"id_2\", \"id_3\", \"id_4\", \"id_5\", \n\"id_6\", \"id_7\", \"id_8\", \"id_9\", \"id_10\", \"id_11\", \"id_12\", \"id_13\", \n\"id_14\", \"id_15\", \"id_16\", \"id_17\", \"id_18\", \"id_19\", \"id_20\", \n\"id_21\", \"id_22\", \"id_23\", \"id_24\", \"id_25\", \"id_26\", \"id_27\", \n\"id_28\", \"id_29\", \"id_30\", \"id_31\", \"id_32\", \"id_33\", \"id_34\", \n\"id_35\", \"id_36\", \"id_37\", \"id_38\", \"id_39\", \"id_40\", \"id_41\", \n\"id_42\", \"id_43\", \"id_44\", \"id_45\", \"id_46\", \"id_47\", \"id_48\", \n\"id_49\", \"id_50\"), age = c(50L, 34L, 70L, 33L, 22L, 61L, 69L, \n73L, 62L, 56L, 71L, 33L, 73L, 44L, 45L, 46L, 24L, 70L, 46L, 76L, \n47L, 76L, 28L, 48L, 54L, 27L, 45L, 26L, 61L, 28L, 38L, 55L, 33L, \n36L, 62L, 58L, 72L, 31L, 34L, 51L, 61L, 64L, 26L, 28L, 60L, 29L, \n42L, 46L, 79L, 72L), gender = c(\"male\", \"male\", \"male\", \"female\", \n\"female\", \"male\", \"female\", \"male\", \"male\", \"female\", \"female\", \n\"male\", \"male\", \"female\", \"male\", \"male\", \"male\", \"male\", \"female\", \n\"male\", \"male\", \"male\", \"male\", \"female\", \"femal\", \"male\", \"female\", \n\"female\", \"female\", \"female\", \"male\", \"female\", \"female\", \"female\", \n\"male\", \"male\", \"female\", \"male\", \"female\", \"female\", \"male\", \n\"female\", \"female\", \"male\", \"male\", \"female\", \"male\", \"male\", \n\"male\", \"female\"), height = c(174.4, 197.7, 174.1, 194.5, NA, \n180.4, 170.5, 157.4, 196.8, 165.1, 153, 197.4, 186, 157.1, 177.5, \n197.7, 179.3, 170.2, 182.4, NA, 165.4, 161, 168.5, 199.2, 157.7, \n154.6, 157.1, 184.5, 181, 194.6, 183.6, 186.9, 176.1, 183, 191.1, \n189.3, 199, 172, 165.6, 170.5, 150.5, 159.2, 192.1, 161.6, 162, \n153.8, 162.3, 186.6, 192.4, 174.9), weight = c(69.4, 62.3, 55.6, \n69.5, 78.6, 60.8, 72.2, 60.9, 75.1, 67.7, 82.5, 68.7, 67.8, 76.7, \n87, 61.1, 70.6, 63.3, 81.5, 59.2, 93.2, 87.3, 83.4, 80.9, 68.6, \n76.5, 93.7, 79.1, 92, 65.6, 85.4, 63.3, 79.7, 74.1, 63.3, 78.2, \n95.7, 95.1, 63.7, 66.1, 99.3, 81, 96.9, 73.3, 70.3, 83, 57.6, \n78.6, 61.9, 98.1), blood_type = c(\"O\", \"A\", \"O\", \"O\", \"B\", \"AB\", \n\"O\", \"O\", \"O\", \"AB\", \"A\", \"O\", \"O\", \"O\", \"B\", \"A\", \"B\", \"AB\", \n\"O\", \"AB\", \"A\", \"AB\", \"O\", \"B\", \"A\", \"A\", \"B\", \"AB\", \"A\", \"B\", \n\"B\", \"A\", \"O\", \"O\", \"O\", \"B\", \"O\", \"A\", \"A\", \"B\", \"A\", \"O\", \"AB\", \n\"A\", \"A\", \"O\", \"O\", \"B\", \"A\", \"O\"), disease_status = c(\"diseased\", \n\"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"diseased\", \n\"healthy\", \"diseased\", \"Healthy\", \"diseased\", \"healthy\", \"diseased\", \n\"healthy\", \"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n\"healthy\", \"healthy\", \"diseased\", \"healthy\", \"diseased\", \"healthy\", \n\"healthy\", \"healthy\", \"healthy\", \"diseased\", \"diseased\", \"healthy\", \n\"healthy\", \"healthy\", \"diseased\", \"diseased\", \"diseased\", \"healthy\", \n\"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n\"diseased\", \"diseased\", \"diseased\", \"healthy\", \"healthy\", \"diseased\", \n\"diseased\"), cholesterol = c(228, 223, 213, 198, 166, 151, 195, \n199, 189, 196, 221, 156, 185, 230, 234, 174, 185, 236, 235, 180, \n165, 220, 160, 153, 250, 153, 184, 242, 212, 179, 224, 233, 181, \n199, 220, 214, 214, 248, 191, 162, 203, 173, 199, 187, 248, 189, \n173, 212, 164, 247), glucose = c(96, 78, 101, 119, 103, 91, 86, \nNA, 77, 80, 115, 85, 88, 109, NA, 71, 90, 94, 91, 87, 113, 93, \n97, 118, 109, 80, 85, 119, 99, 108, 89, 108, 97, 116, 79, 84, \n75, 81, 119, NA, 106, 109, 75, 82, 84, 75, 76, 120, 119, 77), \n    smoker = c(\"yes\", \"yes\", \"yes\", \"yes\", \"no\", \"yes\", \"no\", \n    \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n    \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"no\", \n    \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n    \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \n    \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\"), exercise = c(\"occasional\", \n    \"regular\", \"occasional\", \"regular\", \"none\", \"occasional\", \n    \"regular\", \"none\", \"occasional\", \"none\", \"occasional\", \"none\", \n    \"none\", \"regular\", \"occasional\", \"none\", \"regular\", \"regular\", \n    \"none\", \"occasional\", \"none\", \"occasional\", \"occasional\", \n    \"occasional\", \"regular\", \"occasional\", \"regular\", \"regular\", \n    \"regular\", \"occasional\", \"occasional\", \"none\", \"none\", \"regular\", \n    \"occasional\", \"occasional\", \"none\", \"none\", \"none\", \"none\", \n    \"occasional\", \"regular\", \"regular\", \"none\", \"regular\", \"occasional\", \n    \"occasional\", \"none\", \"occasional\", \"regular\"), income = c(84820L, \n    81547L, 22588L, 72490L, 74533L, 25338L, 41469L, 57315L, 63629L, \n    88662L, 62615L, 56261L, 58499L, 82232L, 77584L, 77275L, 38468L, \n    54510L, 91326L, 78611L, 31402L, 29586L, 21441L, 58269L, 84173L, \n    88295L, 37940L, 43750L, 69750L, 92356L, 82518L, 91455L, 68866L, \n    51178L, 68275L, 27689L, 35418L, 81318L, 62405L, 86851L, 25654L, \n    47553L, 74474L, 51409L, 22607L, 55360L, 96351L, 21516L, 41927L, \n    55810L), education = c(\"master\", \"bachelor\", \"PhD\", \"master\", \n    \"bachelor\", \"highschool\", \"PhD\", \"highschool\", \"PhD\", \"PhD\", \n    \"bachelor\", \"highschool\", \"master\", \"bachelor\", \"PhD\", \"PhD\", \n    \"PhD\", \"bachelor\", \"master\", \"highschool\", \"PhD\", \"highschool\", \n    \"bachelor\", \"master\", \"highschool\", \"highschool\", \"master\", \n    \"master\", \"bachelor\", \"PhD\", \"highschool\", \"PhD\", \"master\", \n    \"master\", \"master\", \"PhD\", \"highschool\", \"master\", \"master\", \n    \"highschool\", \"bachelor\", \"highschool\", \"bachelor\", \"PhD\", \n    \"bachelor\", \"highschool\", \"master\", \"highschool\", \"bachelor\", \n    \"bachelor\"), region = c(\"North\", \"South\", \"North\", \"West\", \n    \"North\", \"West\", \"South\", \"South\", \"West\", \"South\", \"West\", \n    \"South\", \"West\", \"East\", \"North\", \"West\", \"North\", \"North\", \n    \"West\", \"North\", \"East\", \"West\", \"South\", \"North\", \"North\", \n    \"East\", \"East\", \"North\", \"North\", \"West\", \"South\", \"West\", \n    \"West\", \"East\", \"West\", \"North\", \"West\", \"North\", \"East\", \n    \"North\", \"West\", \"South\", \"South\", \"East\", \"North\", \"West\", \n    \"West\", \"East\", \"North\", \"East\"), marital_status = c(\"divorced\", \n    \"single\", \"divorced\", \"divorced\", \"divorced\", \"divorced\", \n    \"divorced\", \"married\", \"divorced\", \"married\", \"divorced\", \n    \"widowed\", \"married\", \"single\", \"widowed\", \"widowed\", \"single\", \n    \"divorced\", \"widowed\", \"widowed\", \"single\", \"married\", \"single\", \n    \"married\", \"widowed\", \"married\", \"single\", \"single\", \"widowed\", \n    \"married\", \"widowed\", \"divorced\", \"single\", \"married\", \"single\", \n    \"widowed\", \"widowed\", \"married\", \"widowed\", \"divorced\", \"married\", \n    \"married\", \"divorced\", \"single\", \"married\", \"widowed\", \"divorced\", \n    \"divorced\", \"single\", \"divorced\")), row.names = c(NA, -50L\n), class = c(\"tbl_df\", \"tbl\", \"data.frame\"))\n\nclass(individual_data)\n\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nCode\nUtilsDataRSV::view_cols(individual_data)\n\n\n[1] \"id\"\n [1] \"id_3\"  \"id_13\" \"id_20\" \"id_17\" \"id_32\" \"id_8\"  \"id_44\" \"id_42\" \"id_36\"\n[10] \"id_22\" \"id_4\"  \"id_29\" \"id_16\" \"id_34\" \"id_49\" \"id_14\" \"id_23\" \"id_15\"\n[19] \"id_19\" \"id_40\"\n[1] \"30 unique entries not displayed\"\n[1] \"_____________________\"\n[1] \"age\"\n[1] 29 50 79 54 70\n[1] \"_____________________\"\n[1] \"gender\"\n[1] \"femal\"  \"male\"   \"female\"\n[1] \"_____________________\"\n[1] \"height\"\n[1] 184.5 165.4 174.4 181.0    NA\n[1] \"_____________________\"\n[1] \"weight\"\n[1] 95.1 74.1 55.6 60.9 83.0\n[1] \"_____________________\"\n[1] \"blood_type\"\n[1] \"B\"  \"A\"  \"O\"  \"AB\"\n[1] \"_____________________\"\n[1] \"disease_status\"\n[1] \"diseased\" \"Healthy\"  \"healthy\" \n[1] \"_____________________\"\n[1] \"cholesterol\"\n[1] 235 174 185 221 234\n[1] \"_____________________\"\n[1] \"glucose\"\n[1] 115  88 113  84  NA\n[1] \"_____________________\"\n[1] \"smoker\"\n[1] \"no\"  \"yes\"\n[1] \"_____________________\"\n[1] \"exercise\"\n[1] \"regular\"    \"occasional\" \"none\"      \n[1] \"_____________________\"\n[1] \"income\"\n[1] 68275 58269 62615 92356 51409\n[1] \"_____________________\"\n[1] \"education\"\n[1] \"bachelor\"   \"highschool\" \"master\"     \"PhD\"       \n[1] \"_____________________\"\n[1] \"region\"\n[1] \"North\" \"West\"  \"South\" \"East\" \n[1] \"_____________________\"\n[1] \"marital_status\"\n[1] \"married\"  \"widowed\"  \"single\"   \"divorced\"\n[1] \"_____________________\"\n\n\nWarning: Not all unique entries displayed for these non-numeric cols: id\n\n\nIn the data set we notice the following inconsistencies:\nIn the gender column, there is a typo “femal” instead of “female”. Disease status column also has a case inconsistency with “Healthy” and “healthy” Height and Glucose have missing entries “NA”",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Prac4</span>"
    ]
  }
]